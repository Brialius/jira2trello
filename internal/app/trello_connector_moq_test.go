// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"github.com/Brialius/jira2trello/internal/trello"
	"sync"
)

// Ensure, that TrelloConnectorMock does implement TrelloConnector.
// If this is not the case, regenerate this file with moq.
var _ TrelloConnector = &TrelloConnectorMock{}

// TrelloConnectorMock is a mock implementation of TrelloConnector.
//
//     func TestSomethingThatUsesTrelloConnector(t *testing.T) {
//
//         // make and configure a mocked TrelloConnector
//         mockedTrelloConnector := &TrelloConnectorMock{
//             ConnectFunc: func() error {
// 	               panic("mock out the Connect method")
//             },
//             CreateCardFunc: func(in1 *trello.Card) error {
// 	               panic("mock out the CreateCard method")
//             },
//             GetBoardsFunc: func() (map[string]*trello.Board, error) {
// 	               panic("mock out the GetBoards method")
//             },
//             GetConfigFunc: func() *trello.Config {
// 	               panic("mock out the GetConfig method")
//             },
//             GetLabelsFunc: func() (map[string]*trello.Label, error) {
// 	               panic("mock out the GetLabels method")
//             },
//             GetListsFunc: func() (map[string]*trello.List, error) {
// 	               panic("mock out the GetLists method")
//             },
//             GetUserJiraCardsFunc: func() ([]*trello.Card, error) {
// 	               panic("mock out the GetUserJiraCards method")
//             },
//             MoveCardToListFunc: func(in1 string, in2 string) error {
// 	               panic("mock out the MoveCardToList method")
//             },
//             SetBoardFunc: func() error {
// 	               panic("mock out the SetBoard method")
//             },
//             UpdateCardLabelsFunc: func(in1 string, in2 string) error {
// 	               panic("mock out the UpdateCardLabels method")
//             },
//         }
//
//         // use mockedTrelloConnector in code that requires TrelloConnector
//         // and then make assertions.
//
//     }
type TrelloConnectorMock struct {
	// ConnectFunc mocks the Connect method.
	ConnectFunc func() error

	// CreateCardFunc mocks the CreateCard method.
	CreateCardFunc func(in1 *trello.Card) error

	// GetBoardsFunc mocks the GetBoards method.
	GetBoardsFunc func() (map[string]*trello.Board, error)

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *trello.Config

	// GetLabelsFunc mocks the GetLabels method.
	GetLabelsFunc func() (map[string]*trello.Label, error)

	// GetListsFunc mocks the GetLists method.
	GetListsFunc func() (map[string]*trello.List, error)

	// GetUserJiraCardsFunc mocks the GetUserJiraCards method.
	GetUserJiraCardsFunc func() ([]*trello.Card, error)

	// MoveCardToListFunc mocks the MoveCardToList method.
	MoveCardToListFunc func(in1 string, in2 string) error

	// SetBoardFunc mocks the SetBoard method.
	SetBoardFunc func() error

	// UpdateCardLabelsFunc mocks the UpdateCardLabels method.
	UpdateCardLabelsFunc func(in1 string, in2 string) error

	// calls tracks calls to the methods.
	calls struct {
		// Connect holds details about calls to the Connect method.
		Connect []struct {
		}
		// CreateCard holds details about calls to the CreateCard method.
		CreateCard []struct {
			// In1 is the in1 argument value.
			In1 *trello.Card
		}
		// GetBoards holds details about calls to the GetBoards method.
		GetBoards []struct {
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetLabels holds details about calls to the GetLabels method.
		GetLabels []struct {
		}
		// GetLists holds details about calls to the GetLists method.
		GetLists []struct {
		}
		// GetUserJiraCards holds details about calls to the GetUserJiraCards method.
		GetUserJiraCards []struct {
		}
		// MoveCardToList holds details about calls to the MoveCardToList method.
		MoveCardToList []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 string
		}
		// SetBoard holds details about calls to the SetBoard method.
		SetBoard []struct {
		}
		// UpdateCardLabels holds details about calls to the UpdateCardLabels method.
		UpdateCardLabels []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 string
		}
	}
	lockConnect          sync.RWMutex
	lockCreateCard       sync.RWMutex
	lockGetBoards        sync.RWMutex
	lockGetConfig        sync.RWMutex
	lockGetLabels        sync.RWMutex
	lockGetLists         sync.RWMutex
	lockGetUserJiraCards sync.RWMutex
	lockMoveCardToList   sync.RWMutex
	lockSetBoard         sync.RWMutex
	lockUpdateCardLabels sync.RWMutex
}

// Connect calls ConnectFunc.
func (mock *TrelloConnectorMock) Connect() error {
	if mock.ConnectFunc == nil {
		panic("TrelloConnectorMock.ConnectFunc: method is nil but TrelloConnector.Connect was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConnect.Lock()
	mock.calls.Connect = append(mock.calls.Connect, callInfo)
	mock.lockConnect.Unlock()
	return mock.ConnectFunc()
}

// ConnectCalls gets all the calls that were made to Connect.
// Check the length with:
//     len(mockedTrelloConnector.ConnectCalls())
func (mock *TrelloConnectorMock) ConnectCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConnect.RLock()
	calls = mock.calls.Connect
	mock.lockConnect.RUnlock()
	return calls
}

// CreateCard calls CreateCardFunc.
func (mock *TrelloConnectorMock) CreateCard(in1 *trello.Card) error {
	if mock.CreateCardFunc == nil {
		panic("TrelloConnectorMock.CreateCardFunc: method is nil but TrelloConnector.CreateCard was just called")
	}
	callInfo := struct {
		In1 *trello.Card
	}{
		In1: in1,
	}
	mock.lockCreateCard.Lock()
	mock.calls.CreateCard = append(mock.calls.CreateCard, callInfo)
	mock.lockCreateCard.Unlock()
	return mock.CreateCardFunc(in1)
}

// CreateCardCalls gets all the calls that were made to CreateCard.
// Check the length with:
//     len(mockedTrelloConnector.CreateCardCalls())
func (mock *TrelloConnectorMock) CreateCardCalls() []struct {
	In1 *trello.Card
} {
	var calls []struct {
		In1 *trello.Card
	}
	mock.lockCreateCard.RLock()
	calls = mock.calls.CreateCard
	mock.lockCreateCard.RUnlock()
	return calls
}

// GetBoards calls GetBoardsFunc.
func (mock *TrelloConnectorMock) GetBoards() (map[string]*trello.Board, error) {
	if mock.GetBoardsFunc == nil {
		panic("TrelloConnectorMock.GetBoardsFunc: method is nil but TrelloConnector.GetBoards was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetBoards.Lock()
	mock.calls.GetBoards = append(mock.calls.GetBoards, callInfo)
	mock.lockGetBoards.Unlock()
	return mock.GetBoardsFunc()
}

// GetBoardsCalls gets all the calls that were made to GetBoards.
// Check the length with:
//     len(mockedTrelloConnector.GetBoardsCalls())
func (mock *TrelloConnectorMock) GetBoardsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBoards.RLock()
	calls = mock.calls.GetBoards
	mock.lockGetBoards.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *TrelloConnectorMock) GetConfig() *trello.Config {
	if mock.GetConfigFunc == nil {
		panic("TrelloConnectorMock.GetConfigFunc: method is nil but TrelloConnector.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//     len(mockedTrelloConnector.GetConfigCalls())
func (mock *TrelloConnectorMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetLabels calls GetLabelsFunc.
func (mock *TrelloConnectorMock) GetLabels() (map[string]*trello.Label, error) {
	if mock.GetLabelsFunc == nil {
		panic("TrelloConnectorMock.GetLabelsFunc: method is nil but TrelloConnector.GetLabels was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetLabels.Lock()
	mock.calls.GetLabels = append(mock.calls.GetLabels, callInfo)
	mock.lockGetLabels.Unlock()
	return mock.GetLabelsFunc()
}

// GetLabelsCalls gets all the calls that were made to GetLabels.
// Check the length with:
//     len(mockedTrelloConnector.GetLabelsCalls())
func (mock *TrelloConnectorMock) GetLabelsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetLabels.RLock()
	calls = mock.calls.GetLabels
	mock.lockGetLabels.RUnlock()
	return calls
}

// GetLists calls GetListsFunc.
func (mock *TrelloConnectorMock) GetLists() (map[string]*trello.List, error) {
	if mock.GetListsFunc == nil {
		panic("TrelloConnectorMock.GetListsFunc: method is nil but TrelloConnector.GetLists was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetLists.Lock()
	mock.calls.GetLists = append(mock.calls.GetLists, callInfo)
	mock.lockGetLists.Unlock()
	return mock.GetListsFunc()
}

// GetListsCalls gets all the calls that were made to GetLists.
// Check the length with:
//     len(mockedTrelloConnector.GetListsCalls())
func (mock *TrelloConnectorMock) GetListsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetLists.RLock()
	calls = mock.calls.GetLists
	mock.lockGetLists.RUnlock()
	return calls
}

// GetUserJiraCards calls GetUserJiraCardsFunc.
func (mock *TrelloConnectorMock) GetUserJiraCards() ([]*trello.Card, error) {
	if mock.GetUserJiraCardsFunc == nil {
		panic("TrelloConnectorMock.GetUserJiraCardsFunc: method is nil but TrelloConnector.GetUserJiraCards was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetUserJiraCards.Lock()
	mock.calls.GetUserJiraCards = append(mock.calls.GetUserJiraCards, callInfo)
	mock.lockGetUserJiraCards.Unlock()
	return mock.GetUserJiraCardsFunc()
}

// GetUserJiraCardsCalls gets all the calls that were made to GetUserJiraCards.
// Check the length with:
//     len(mockedTrelloConnector.GetUserJiraCardsCalls())
func (mock *TrelloConnectorMock) GetUserJiraCardsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUserJiraCards.RLock()
	calls = mock.calls.GetUserJiraCards
	mock.lockGetUserJiraCards.RUnlock()
	return calls
}

// MoveCardToList calls MoveCardToListFunc.
func (mock *TrelloConnectorMock) MoveCardToList(in1 string, in2 string) error {
	if mock.MoveCardToListFunc == nil {
		panic("TrelloConnectorMock.MoveCardToListFunc: method is nil but TrelloConnector.MoveCardToList was just called")
	}
	callInfo := struct {
		In1 string
		In2 string
	}{
		In1: in1,
		In2: in2,
	}
	mock.lockMoveCardToList.Lock()
	mock.calls.MoveCardToList = append(mock.calls.MoveCardToList, callInfo)
	mock.lockMoveCardToList.Unlock()
	return mock.MoveCardToListFunc(in1, in2)
}

// MoveCardToListCalls gets all the calls that were made to MoveCardToList.
// Check the length with:
//     len(mockedTrelloConnector.MoveCardToListCalls())
func (mock *TrelloConnectorMock) MoveCardToListCalls() []struct {
	In1 string
	In2 string
} {
	var calls []struct {
		In1 string
		In2 string
	}
	mock.lockMoveCardToList.RLock()
	calls = mock.calls.MoveCardToList
	mock.lockMoveCardToList.RUnlock()
	return calls
}

// SetBoard calls SetBoardFunc.
func (mock *TrelloConnectorMock) SetBoard() error {
	if mock.SetBoardFunc == nil {
		panic("TrelloConnectorMock.SetBoardFunc: method is nil but TrelloConnector.SetBoard was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSetBoard.Lock()
	mock.calls.SetBoard = append(mock.calls.SetBoard, callInfo)
	mock.lockSetBoard.Unlock()
	return mock.SetBoardFunc()
}

// SetBoardCalls gets all the calls that were made to SetBoard.
// Check the length with:
//     len(mockedTrelloConnector.SetBoardCalls())
func (mock *TrelloConnectorMock) SetBoardCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSetBoard.RLock()
	calls = mock.calls.SetBoard
	mock.lockSetBoard.RUnlock()
	return calls
}

// UpdateCardLabels calls UpdateCardLabelsFunc.
func (mock *TrelloConnectorMock) UpdateCardLabels(in1 string, in2 string) error {
	if mock.UpdateCardLabelsFunc == nil {
		panic("TrelloConnectorMock.UpdateCardLabelsFunc: method is nil but TrelloConnector.UpdateCardLabels was just called")
	}
	callInfo := struct {
		In1 string
		In2 string
	}{
		In1: in1,
		In2: in2,
	}
	mock.lockUpdateCardLabels.Lock()
	mock.calls.UpdateCardLabels = append(mock.calls.UpdateCardLabels, callInfo)
	mock.lockUpdateCardLabels.Unlock()
	return mock.UpdateCardLabelsFunc(in1, in2)
}

// UpdateCardLabelsCalls gets all the calls that were made to UpdateCardLabels.
// Check the length with:
//     len(mockedTrelloConnector.UpdateCardLabelsCalls())
func (mock *TrelloConnectorMock) UpdateCardLabelsCalls() []struct {
	In1 string
	In2 string
} {
	var calls []struct {
		In1 string
		In2 string
	}
	mock.lockUpdateCardLabels.RLock()
	calls = mock.calls.UpdateCardLabels
	mock.lockUpdateCardLabels.RUnlock()
	return calls
}
