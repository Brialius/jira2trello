// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"github.com/Brialius/jira2trello/internal/jira"
	"sync"
)

// Ensure, that JiraConnectorMock does implement JiraConnector.
// If this is not the case, regenerate this file with moq.
var _ JiraConnector = &JiraConnectorMock{}

// JiraConnectorMock is a mock implementation of JiraConnector.
//
//     func TestSomethingThatUsesJiraConnector(t *testing.T) {
//
//         // make and configure a mocked JiraConnector
//         mockedJiraConnector := &JiraConnectorMock{
//             ConnectFunc: func() error {
// 	               panic("mock out the Connect method")
//             },
//             GetUserTasksFunc: func() (map[string]*jira.Task, error) {
// 	               panic("mock out the GetUserTasks method")
//             },
//         }
//
//         // use mockedJiraConnector in code that requires JiraConnector
//         // and then make assertions.
//
//     }
type JiraConnectorMock struct {
	// ConnectFunc mocks the Connect method.
	ConnectFunc func() error

	// GetUserTasksFunc mocks the GetUserTasks method.
	GetUserTasksFunc func() (map[string]*jira.Task, error)

	// calls tracks calls to the methods.
	calls struct {
		// Connect holds details about calls to the Connect method.
		Connect []struct {
		}
		// GetUserTasks holds details about calls to the GetUserTasks method.
		GetUserTasks []struct {
		}
	}
	lockConnect      sync.RWMutex
	lockGetUserTasks sync.RWMutex
}

// Connect calls ConnectFunc.
func (mock *JiraConnectorMock) Connect() error {
	if mock.ConnectFunc == nil {
		panic("JiraConnectorMock.ConnectFunc: method is nil but JiraConnector.Connect was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConnect.Lock()
	mock.calls.Connect = append(mock.calls.Connect, callInfo)
	mock.lockConnect.Unlock()
	return mock.ConnectFunc()
}

// ConnectCalls gets all the calls that were made to Connect.
// Check the length with:
//     len(mockedJiraConnector.ConnectCalls())
func (mock *JiraConnectorMock) ConnectCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConnect.RLock()
	calls = mock.calls.Connect
	mock.lockConnect.RUnlock()
	return calls
}

// GetUserTasks calls GetUserTasksFunc.
func (mock *JiraConnectorMock) GetUserTasks() (map[string]*jira.Task, error) {
	if mock.GetUserTasksFunc == nil {
		panic("JiraConnectorMock.GetUserTasksFunc: method is nil but JiraConnector.GetUserTasks was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetUserTasks.Lock()
	mock.calls.GetUserTasks = append(mock.calls.GetUserTasks, callInfo)
	mock.lockGetUserTasks.Unlock()
	return mock.GetUserTasksFunc()
}

// GetUserTasksCalls gets all the calls that were made to GetUserTasks.
// Check the length with:
//     len(mockedJiraConnector.GetUserTasksCalls())
func (mock *JiraConnectorMock) GetUserTasksCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUserTasks.RLock()
	calls = mock.calls.GetUserTasks
	mock.lockGetUserTasks.RUnlock()
	return calls
}
